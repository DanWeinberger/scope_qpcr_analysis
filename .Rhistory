color=colorRampPalette(c('red4','red','darkorange','orange','gold','lightgoldenrod1','white','white'))(length(breakslist)),
breaks=breakslist,
legend=F,
labels_col = weeks)
sub3 <- ds.plot[(cut4+1):cut5,]
gap3 <- which(sub3$HH_order==1) +1
gap3 <- gap3[-length(gap3)]
heat3<-pheatmap(sub3[,c('1','2','3','4','5','6')],
cluster_cols = F,
cluster_rows = F,
gaps_row = gap3,
labels_row = sub3$labels,
cellwidth = 9,
cellheight = 9,
color=colorRampPalette(c('red4','red','darkorange','orange','gold','lightgoldenrod1','white','white'))(length(breakslist)),
breaks=breakslist,
legend=F,
labels_col = weeks)
sub4 <- ds.plot[(cut5+1):nrow(ds.plot),]
gap4 <- which(sub4$HH_order==1) +1
gap4 <- gap4[-length(gap4)]
heat4<-pheatmap(sub4[,c('1','2','3','4','5','6')],
cluster_cols = F,
cluster_rows = F,
gaps_row = gap4,
labels_row = sub4$labels,
cellwidth = 9,
cellheight = 9,
color=colorRampPalette(c('red4','red','darkorange','orange','gold','lightgoldenrod1','white','white'))(length(breakslist)),
breaks=breakslist,
legend=T,
labels_col = weeks)
tiff(paste("Heat", target,".tiff"), width=8, height=8, unit='in', res=200)
grid.arrange(heat1[[4]],heat2[[4]],heat3[[4]],heat4[[4]],ncol=4)
dev.off()
out.graph <- grid.arrange(heat1[[4]],heat2[[4]],heat3[[4]],heat4[[4]],ncol=4)
return(out.graph)
}
piab.plot <- heat.fun(target='piab')
# breakslist<-seq(15,45,by=1)
#
# cols1 <- colorRampPalette(c('red4','red','darkorange','orange','gold','lightgoldenrod1','white','white'))(length(breakslist))
#
# p1 <- ggplot(d1.ds, aes(time, HH_order, fill= piab)) +
#   geom_tile() +
#   scale_fill_viridis_c(option = "B", direction = -1) +
#
#   theme_classic()+
#   ylab('Serotype tested')+
#    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
#   facet_wrap(~Household, ncol=3)+
#   theme(
#   strip.text.x = element_blank()
# )
# p1
knitr::opts_chunk$set(echo = FALSE)
library(readxl)
library(reshape2)
library(dplyr)
library(stringr)
library(pheatmap)
library(RColorBrewer)
library(cowplot)
library(gridExtra)
library(ggplotify)
library(table1)
library(lubridate)
library(patchwork)
library(msm)
library(gee)
source('heat.fun.R')
source('heat.fun.contact.R')
key1a <- read.csv('./Data/hh_id_key.csv')
master1 <- read_excel('./Data/confidential/SCOPE_Master_20210108.xlsx', sheet='COM SAL')
key2 <- read_excel('./Data/confidential/SCOPE Participant MRN and ID.xlsx', skip=1)
key3 <- cbind.data.frame('id'=c(100:101) , 'Household'=c(51,51) )
key4a <- bind_rows(key1a,key3)
key4a$id <- paste0('S1_', key4a$id)
key4a$Household <- paste0('S1_', key4a$Household) #SEASON 1 key
file_list <- list.files(path="./Data/Final Scope Results Drift Correction")
all.res.season1 <-
lapply(file_list, function(x){
print(x)
ds <- read_excel(paste0("./Data/Final Scope Results Drift Correction/",x), skip=19)
ds$expt <- substr(x,1,4)
ds$Sample <- as.character(ds$Sample)
ds$Target <- as.character(ds$Target)
ds$Cq <- as.numeric(as.character(ds$Cq))
cols.keep <-
c('Cq','Sample','Target','Content','expt','Biological Set Name')
ds.names <- names(ds)
ds.names <- intersect(ds.names,cols.keep)
ds <- ds[,ds.names]
ds$Sample <- paste0('S1_', ds$Sample)
return(ds)
})
file_list_s2 <- list.files(path="./Data/cleaned_season2")
all.res.season2 <-
lapply(file_list_s2, function(x){
print(x)
ds <- read_excel(paste0("./Data/cleaned_season2/",x), skip=19)
ds$expt <- substr(x,1,4)
ds$Sample <- as.character(ds$Sample)
ds$Target <- as.character(ds$Target)
ds$Cq <- as.numeric(as.character(ds$Cq))
cols.keep <-
c('Cq','Sample','Target','Content','expt','Biological Set Name')
ds.names <- names(ds)
ds.names <- intersect(ds.names,cols.keep)
ds <- ds[,ds.names]
ds$`Biological Set Name` <- NA
ds$Sample <- paste0('S2_', ds$Sample)
return(ds)
})
all.res <- c( all.res.season1,all.res.season2)
all.res <- lapply(1:length(all.res), function(x){ all.res[[x]]$plate= x
return(all.res[[x]])
})
test1 <- lapply(all.res, function(x)  is.character(x$Target))
b1 <- bind_rows(all.res)
b1$Cq[is.na(b1$Cq)] <- 45
b1$Target[is.na(b1$Target)] <-
b1$`Biological Set Name`[is.na(b1$Target)]
b1 <- b1[b1$Content!='Std',]
b1$Target <- gsub(' ' ,'', b1$Target, fixed=T)
b1$Target <- tolower(b1$Target)
b1$Target[grep('lyta',b1$Target)] <- 'lyta'
b1$Target[grep('piab',b1$Target)] <- 'piab'
#b1$Sample[is.na(b1$Sample)] <- b1$`sample id`[is.na(b1$Sample)]
b1 <- b1[!is.na(b1$Sample),]
b1 <- b1[-grep('neg',b1$Sample),]
b1 <- b1[-grep('NA',b1$Sample),]
b1 <- b1[-grep('NTC',b1$Sample),]
b1 <- b1[-grep('NEG',b1$Sample),]
b1 <- b1[-grep('NEC',b1$Sample),]
b1 <- b1[-grep('nec',b1$Sample),]
b1 <- b1[-grep('ntc',b1$Sample),]
b1 <- b1[-grep('apex',b1$Sample),]
b1 <- b1[-grep('-1',b1$Sample),]
b1 <- b1[-grep('-2',b1$Sample),]
b1 <- b1[-grep('-3',b1$Sample),]
b1 <- b1[-grep('-4',b1$Sample),]
b1 <- b1[-grep('-5',b1$Sample),]
b1 <- b1[-grep('QC',b1$Sample),]
b1$Sample <- gsub('rep','',b1$Sample)
#b1$Sample <- round(as.numeric(b1$Sample),1)
c1 <- b1[, c('Sample','Cq','Target','plate')]
c1$Cq[is.na(c1$Cq)] <- 45
c1.m <- reshape2::melt(c1, id.vars= c('Sample','Target','plate'))
##If sample tested multiple times call pos if pos on multiple runs. Ct<40=pos
c1.m <- c1.m %>%
group_by(Sample, Target) %>%
mutate(N_tests= n(), n_pos=sum(value<40), ct_pos=mean(value[value<40], na.rm=T), ct_min=min(value, na.rm=T) ) %>%
ungroup()
#if negative, set ct to 45
c1.m$ct_pos[is.nan(c1.m$ct_pos)] <- 45
c1.m$ct_pos2 <- c1.m$ct_pos
#If min Ct value<35, use ave value of positive regardless of number of tests performed.
c1.m$ct_pos2[c1.m$ct_min <= 35] <- c1.m$ct_pos[c1.m$ct_min <= 35] #if ave is <35, call positive regardless of N tests
#If min Ct>35, and 3 or more tests performed, with only 1 positive, call it a negative
c1.m$ct_pos2[c1.m$N_tests>=3 & c1.m$n_pos<=1 & c1.m$ct_min > 35] <- 45 #if 3 or more tests, and 0 or 1 are weakly positive or neg, then call it negative
#If min >35, with at least 2 tests performed and at least 2 were positive, call it positive
c1.m$ct_pos2[c1.m$N_tests>=2 & c1.m$n_pos>= 2 & c1.m$ct_min > 35] <-
c1.m$ct_pos[c1.m$N_tests>=2 & c1.m$n_pos>= 2 & c1.m$ct_min > 35] #if 3 or more tests, and 0 or 1 are weakly positive or neg, then call it negative
#if min Ct>35, N tests is <=2 and only 1 positive, call it negative
c1.m$ct_pos2[c1.m$N_tests<=2 & c1.m$n_pos<=1 & c1.m$ct_min > 35] <- c1.m$ct_pos2[c1.m$N_tests<=2 & c1.m$n_pos<=1 & c1.m$ct_min > 35] #if 2 or fewer tests, and at least 1 is positive, call positive
c1.c <- reshape2::dcast(c1.m[,c('Sample','variable','Target','ct_pos2')], Sample +variable ~ Target, fun.aggregate = min, fill=9999, value.var='ct_pos2')
c1.c$pos <- c1.c$lyta<40 & c1.c$piab<40
write.csv(c1.c, './Data/cleaned_file_s2.csv')
all.ids <- unique(c1.c$Sample)
all.ids <- all.ids[substr(all.ids,1,2)=='S2']
all.ids <- gsub(".*_","",all.ids)
all.ids <- sub('\\..*', '', all.ids)
all.ids <- sort(as.numeric(as.character(unique(all.ids))))
key4b <- cbind.data.frame('id'=all.ids ,'Household'=rep(1:(length(all.ids)/2),each=2) )
key4b$id <- paste0('S2_', key4b$id)
key4b$Household <- paste0('S2_', key4b$Household) #SEASON 1 key
key1ab <- bind_rows(key4a, key4b)
plot(c1.c$lyta, c1.c$piab, xlim= c(45,0), ylim=c(45,0), xlab='lytA', ylab='piaB', bty='l')
abline(a=0, b=1)
abline(h=40, v=40, col='gray', lty=2)
c1.m$ID <- sub("\\.[0-9]+$", "", c1.m$Sample)
c1.m$time_1a <- sub('.*\\.', '', c1.m$Sample)
c1.m$time_2a <- as.numeric(substr(c1.m$time_1a,1,1))
c1.m$time_2b <- as.numeric(substr(c1.m$time_1a,2,2))
c1.m$time_2b[is.na(c1.m$time_2b)] <- 0
c1.m$time <- round(c1.m$time_2a + c1.m$time_2b/10)
c1.m <- c1.m[order(c1.m$ID, c1.m$time),]
c1.m <- merge(c1.m, key1ab, by.x='ID',by.y='id', all.x=T)
c1.m <- c1.m[!(c1.m$ID %in% c('S1_38','S1_39', 'S1_48','S1_49', 'S1_58', 'S1_59')),]
d1 <- dcast(c1.m[,c('ID','Target','time','ct_pos2')],  ID +Target ~ time, fun.aggregate = min, na.rm=T, fill=9999, value.var = 'ct_pos2')
write.csv(d1, './Data/Result1_S2.csv')
d1.alt <- dcast(c1.m[,c('ID','Target','time','ct_pos2')],  ID +time~ Target, fun.aggregate = min, na.rm=T, fill=9999, value.var = 'ct_pos2')
d1.alt <- d1.alt[!(d1.alt$ID %in% c('S1_38','S1_39', 'S1_48','S1_49', 'S1_58', 'S1_59')),] #these IDs were not included in study
write.csv(d1.alt, './Data/Result2_S2.csv') #Anne's preferred format
c1.m <- c1.m[!(c1.m$ID %in% c('S1_38','S1_39', 'S1_48','S1_49', 'S1_58', 'S1_59')),] #these IDs were not included in study
d1.a <- acast(c1.m[,c('ID','Target','time','ct_pos2','Household')], Target ~ ID +Household ~ time, fun.aggregate=min, na.rm=T, fill=9999, value.var = 'ct_pos2')
d1.ds <- reshape2::dcast(c1.m[,c('ID','Target','time','ct_pos2','Household')],   Household +ID+ time ~ Target, fun.aggregate=min, na.rm=T, fill=9999, value.var = 'ct_pos2')
d1.ds <- d1.ds %>%
group_by(Household ,time) %>%
arrange(ID) %>%
mutate(HH_order=row_number() ) %>%
ungroup()
piab.plot <- heat.fun(target='piab')
# breakslist<-seq(15,45,by=1)
#
# cols1 <- colorRampPalette(c('red4','red','darkorange','orange','gold','lightgoldenrod1','white','white'))(length(breakslist))
#
# p1 <- ggplot(d1.ds, aes(time, HH_order, fill= piab)) +
#   geom_tile() +
#   scale_fill_viridis_c(option = "B", direction = -1) +
#
#   theme_classic()+
#   ylab('Serotype tested')+
#    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
#   facet_wrap(~Household, ncol=3)+
#   theme(
#   strip.text.x = element_blank()
# )
# p1
key1a <- read.csv('./Data/hh_id_key.csv')
master1 <- read_excel('./Data/confidential/SCOPE_Master_20210108.xlsx', sheet='COM SAL')
key2 <- read_excel('./Data/confidential/SCOPE Participant MRN and ID.xlsx', skip=1)
key3 <- cbind.data.frame('id'=c(100:101) , 'Household'=c(51,51) )
key4a <- bind_rows(key1a,key3)
key4a$id <- paste0('S1_', key4a$id)
key4a$Household <- paste0('S1_', key4a$Household) #SEASON 1 key
file_list <- list.files(path="./Data/Final Scope Results Drift Correction")
all.res.season1 <-
lapply(file_list, function(x){
print(x)
ds <- read_excel(paste0("./Data/Final Scope Results Drift Correction/",x), skip=19)
ds$expt <- substr(x,1,4)
ds$Sample <- as.character(ds$Sample)
ds$Target <- as.character(ds$Target)
ds$Cq <- as.numeric(as.character(ds$Cq))
cols.keep <-
c('Cq','Sample','Target','Content','expt','Biological Set Name')
ds.names <- names(ds)
ds.names <- intersect(ds.names,cols.keep)
ds <- ds[,ds.names]
ds$Sample <- paste0('S1_', ds$Sample)
return(ds)
})
file_list_s2 <- list.files(path="./Data/cleaned_season2")
all.res.season2 <-
lapply(file_list_s2, function(x){
print(x)
ds <- read_excel(paste0("./Data/cleaned_season2/",x), skip=19)
ds$expt <- substr(x,1,4)
ds$Sample <- as.character(ds$Sample)
ds$Target <- as.character(ds$Target)
ds$Cq <- as.numeric(as.character(ds$Cq))
cols.keep <-
c('Cq','Sample','Target','Content','expt','Biological Set Name')
ds.names <- names(ds)
ds.names <- intersect(ds.names,cols.keep)
ds <- ds[,ds.names]
ds$`Biological Set Name` <- NA
ds$Sample <- paste0('S2_', ds$Sample)
return(ds)
})
all.res <- c( all.res.season1,all.res.season2)
all.res <- lapply(1:length(all.res), function(x){ all.res[[x]]$plate= x
return(all.res[[x]])
})
test1 <- lapply(all.res, function(x)  is.character(x$Target))
b1 <- bind_rows(all.res)
b1$Cq[is.na(b1$Cq)] <- 45
b1$Target[is.na(b1$Target)] <-
b1$`Biological Set Name`[is.na(b1$Target)]
b1 <- b1[b1$Content!='Std',]
b1$Target <- gsub(' ' ,'', b1$Target, fixed=T)
b1$Target <- tolower(b1$Target)
b1$Target[grep('lyta',b1$Target)] <- 'lyta'
b1$Target[grep('piab',b1$Target)] <- 'piab'
#b1$Sample[is.na(b1$Sample)] <- b1$`sample id`[is.na(b1$Sample)]
b1 <- b1[!is.na(b1$Sample),]
b1 <- b1[-grep('neg',b1$Sample),]
b1 <- b1[-grep('NA',b1$Sample),]
b1 <- b1[-grep('NTC',b1$Sample),]
b1 <- b1[-grep('NEG',b1$Sample),]
b1 <- b1[-grep('NEC',b1$Sample),]
b1 <- b1[-grep('nec',b1$Sample),]
b1 <- b1[-grep('ntc',b1$Sample),]
b1 <- b1[-grep('apex',b1$Sample),]
b1 <- b1[-grep('-1',b1$Sample),]
b1 <- b1[-grep('-2',b1$Sample),]
b1 <- b1[-grep('-3',b1$Sample),]
b1 <- b1[-grep('-4',b1$Sample),]
b1 <- b1[-grep('-5',b1$Sample),]
b1 <- b1[-grep('QC',b1$Sample),]
b1$Sample <- gsub('rep','',b1$Sample)
#b1$Sample <- round(as.numeric(b1$Sample),1)
c1 <- b1[, c('Sample','Cq','Target','plate')]
c1$Cq[is.na(c1$Cq)] <- 45
c1.m <- reshape2::melt(c1, id.vars= c('Sample','Target','plate'))
##If sample tested multiple times call pos if pos on multiple runs. Ct<40=pos
c1.m <- c1.m %>%
group_by(Sample, Target) %>%
mutate(N_tests= n(), n_pos=sum(value<40), ct_pos=mean(value[value<40], na.rm=T), ct_min=min(value, na.rm=T) ) %>%
ungroup()
#if negative, set ct to 45
c1.m$ct_pos[is.nan(c1.m$ct_pos)] <- 45
c1.m$ct_pos2 <- c1.m$ct_pos
#If min Ct value<35, use ave value of positive regardless of number of tests performed.
c1.m$ct_pos2[c1.m$ct_min <= 35] <- c1.m$ct_pos[c1.m$ct_min <= 35] #if ave is <35, call positive regardless of N tests
#If min Ct>35, and 3 or more tests performed, with only 1 positive, call it a negative
c1.m$ct_pos2[c1.m$N_tests>=3 & c1.m$n_pos<=1 & c1.m$ct_min > 35] <- 45 #if 3 or more tests, and 0 or 1 are weakly positive or neg, then call it negative
#If min >35, with at least 2 tests performed and at least 2 were positive, call it positive
c1.m$ct_pos2[c1.m$N_tests>=2 & c1.m$n_pos>= 2 & c1.m$ct_min > 35] <-
c1.m$ct_pos[c1.m$N_tests>=2 & c1.m$n_pos>= 2 & c1.m$ct_min > 35] #if 3 or more tests, and 0 or 1 are weakly positive or neg, then call it negative
#if min Ct>35, N tests is <=2 and only 1 positive, call it negative
c1.m$ct_pos2[c1.m$N_tests<=2 & c1.m$n_pos<=1 & c1.m$ct_min > 35] <- c1.m$ct_pos2[c1.m$N_tests<=2 & c1.m$n_pos<=1 & c1.m$ct_min > 35] #if 2 or fewer tests, and at least 1 is positive, call positive
c1.c <- reshape2::dcast(c1.m[,c('Sample','variable','Target','ct_pos2')], Sample +variable ~ Target, fun.aggregate = min, fill=9999, value.var='ct_pos2')
c1.c$pos <- c1.c$lyta<40 & c1.c$piab<40
write.csv(c1.c, './Data/cleaned_file_s2.csv')
all.ids <- unique(c1.c$Sample)
all.ids <- all.ids[substr(all.ids,1,2)=='S2']
all.ids <- gsub(".*_","",all.ids)
all.ids <- sub('\\..*', '', all.ids)
all.ids <- sort(as.numeric(as.character(unique(all.ids))))
key4b <- cbind.data.frame('id'=all.ids ,'Household'=rep(1:(length(all.ids)/2),each=2) )
key4b$id <- paste0('S2_', key4b$id)
key4b$Household <- paste0('S2_', key4b$Household) #SEASON 1 key
key1ab <- bind_rows(key4a, key4b)
View(c1.m)
key1a <- read.csv('./Data/hh_id_key.csv')
master1 <- read_excel('./Data/confidential/SCOPE_Master_20210108.xlsx', sheet='COM SAL')
key2 <- read_excel('./Data/confidential/SCOPE Participant MRN and ID.xlsx', skip=1)
master1 <- read_excel('./Data/confidential/SCOPE_Master_20210108.xlsx', sheet='COM SAL')
key2 <- read_excel('./Data/confidential/SCOPE Participant MRN and ID.xlsx', skip=1)
key3 <- cbind.data.frame('id'=c(100:101) , 'Household'=c(51,51) )
key4a <- bind_rows(key1a,key3)
key4a$id <- paste0('S1_', key4a$id)
key4a$Household <- paste0('S1_', key4a$Household) #SEASON 1 key
file_list <- list.files(path="./Data/Final Scope Results Drift Correction")
all.res.season1 <-
lapply(file_list, function(x){
print(x)
ds <- read_excel(paste0("./Data/Final Scope Results Drift Correction/",x), skip=19)
ds$expt <- substr(x,1,4)
ds$Sample <- as.character(ds$Sample)
ds$Target <- as.character(ds$Target)
ds$Cq <- as.numeric(as.character(ds$Cq))
cols.keep <-
c('Cq','Sample','Target','Content','expt','Biological Set Name')
ds.names <- names(ds)
ds.names <- intersect(ds.names,cols.keep)
ds <- ds[,ds.names]
ds$Sample <- paste0('S1_', ds$Sample)
return(ds)
})
file_list_s2 <- list.files(path="./Data/cleaned_season2")
file_list_s2
all.res.season2 <-
lapply(file_list_s2, function(x){
print(x)
ds <- read_excel(paste0("./Data/cleaned_season2/",x), skip=19)
ds$expt <- substr(x,1,4)
ds$Sample <- as.character(ds$Sample)
ds$Target <- as.character(ds$Target)
ds$Cq <- as.numeric(as.character(ds$Cq))
cols.keep <-
c('Cq','Sample','Target','Content','expt','Biological Set Name')
ds.names <- names(ds)
ds.names <- intersect(ds.names,cols.keep)
ds <- ds[,ds.names]
ds$`Biological Set Name` <- NA
ds$Sample <- paste0('S2_', ds$Sample)
return(ds)
})
str(all.res.season2)
all.res <- c( all.res.season1,all.res.season2)
all.res <- lapply(1:length(all.res), function(x){ all.res[[x]]$plate= x
return(all.res[[x]])
})
test1 <- lapply(all.res, function(x)  is.character(x$Target))
b1 <- bind_rows(all.res)
View(b1)
b1$Cq[is.na(b1$Cq)] <- 45
b1$Target[is.na(b1$Target)] <-
b1$`Biological Set Name`[is.na(b1$Target)]
b1 <- b1[b1$Content!='Std',]
b1$Target <- gsub(' ' ,'', b1$Target, fixed=T)
b1$Target <- tolower(b1$Target)
b1$Target[grep('lyta',b1$Target)] <- 'lyta'
b1$Target[grep('piab',b1$Target)] <- 'piab'
b1 <- b1[!is.na(b1$Sample),]
b1 <- b1[-grep('neg',b1$Sample),]
b1 <- b1[-grep('NA',b1$Sample),]
b1 <- b1[-grep('NTC',b1$Sample),]
b1 <- b1[-grep('NEG',b1$Sample),]
b1 <- b1[-grep('NEC',b1$Sample),]
b1 <- b1[-grep('nec',b1$Sample),]
b1 <- b1[-grep('ntc',b1$Sample),]
b1 <- b1[-grep('apex',b1$Sample),]
b1 <- b1[-grep('-1',b1$Sample),]
b1 <- b1[-grep('-2',b1$Sample),]
b1 <- b1[-grep('-3',b1$Sample),]
b1 <- b1[-grep('-4',b1$Sample),]
b1 <- b1[-grep('-5',b1$Sample),]
b1 <- b1[-grep('QC',b1$Sample),]
b1$Sample <- gsub('rep','',b1$Sample)
c1 <- b1[, c('Sample','Cq','Target','plate')]
c1$Cq[is.na(c1$Cq)] <- 45
View(c1)
c1.m <- reshape2::melt(c1, id.vars= c('Sample','Target','plate'))
View(c1.m)
View(c1)
c1.m <- reshape2::melt(c1, id.vars= c('Sample','Target','plate'))
c1.m <- c1.m %>%
group_by(Sample, Target) %>%
mutate(N_tests= n(), n_pos=sum(value<40), ct_pos=mean(value[value<40], na.rm=T), ct_min=min(value, na.rm=T) ) %>%
ungroup()
#if negative, set ct to 45
c1.m$ct_pos[is.nan(c1.m$ct_pos)] <- 45
c1.m$ct_pos2 <- c1.m$ct_pos
c1.m <- reshape2::melt(c1, id.vars= c('Sample','Target','plate'))
c1.m <- c1.m %>%
group_by(Sample, Target) %>%
mutate(N_tests= n(), n_pos=sum(value<40), ct_pos=mean(value[value<40], na.rm=T), ct_min=min(value, na.rm=T) ) %>%
ungroup()
#if negative, set ct to 45
c1.m$ct_pos[is.nan(c1.m$ct_pos)] <- 45
c1.m$ct_pos2 <- c1.m$ct_pos
#If min Ct value<35, use ave value of positive regardless of number of tests performed.
c1.m$ct_pos2[c1.m$ct_min <= 35] <- c1.m$ct_pos[c1.m$ct_min <= 35] #if ave is <35, call positive regardless of N tests
#If min Ct>35, and 3 or more tests performed, with only 1 positive, call it a negative
c1.m$ct_pos2[c1.m$N_tests>=3 & c1.m$n_pos<=1 & c1.m$ct_min > 35] <- 45 #if 3 or more tests, and 0 or 1 are weakly positive or neg, then call it negative
#If min >35, with at least 2 tests performed and at least 2 were positive, call it positive
c1.m$ct_pos2[c1.m$N_tests>=2 & c1.m$n_pos>= 2 & c1.m$ct_min > 35] <-
c1.m$ct_pos[c1.m$N_tests>=2 & c1.m$n_pos>= 2 & c1.m$ct_min > 35] #if 2 or more tests, and 0 or 1 are weakly positive or neg, then call it negative
#if min Ct>35, N tests is <=2 and only 1 positive, call it negative
c1.m$ct_pos2[c1.m$N_tests<=2 & c1.m$n_pos<=1 & c1.m$ct_min > 35] <- c1.m$ct_pos2[c1.m$N_tests<=2 & c1.m$n_pos<=1 & c1.m$ct_min > 35] #if 2 or fewer tests, and at least 1 is positive, call positive
#if min Ct>35, N tests is <=2 and only 1 positive, call it negative
c1.m$ct_pos2[c1.m$N_tests<=2 & c1.m$n_pos< c1.m$N_tests] <- 45 #if 2 or fewer tests, and at least 1 is positive, call positive
c1.c <- reshape2::dcast(c1.m[,c('Sample','variable','Target','ct_pos2')], Sample +variable ~ Target, fun.aggregate = min, fill=9999, value.var='ct_pos2')
View(c1.c)
c1.c$pos <- c1.c$lyta<40 & c1.c$piab<40
write.csv(c1.c, './Data/cleaned_file_s2.csv')
c1 <- b1[, c('Sample','Cq','Target','plate')]
c1$Cq[is.na(c1$Cq)] <- 45
c1.m <- reshape2::melt(c1, id.vars= c('Sample','Target','plate'))
##If sample tested multiple times call pos if pos on multiple runs. Ct<40=pos
c1.m <- c1.m %>%
group_by(Sample, Target) %>%
mutate(N_tests= n(), n_pos=sum(value<40), ct_pos=mean(value[value<40], na.rm=T), ct_min=min(value, na.rm=T) ) %>%
ungroup()
#if negative, set ct to 45
c1.m$ct_pos[is.nan(c1.m$ct_pos)] <- 45
c1.m$ct_pos2 <- c1.m$ct_pos
#If min Ct value<35, use ave value of positive regardless of number of tests performed.
c1.m$ct_pos2[c1.m$ct_min <= 35] <- c1.m$ct_pos[c1.m$ct_min <= 35] #if ave is <35, call positive regardless of N tests
#If min Ct>35, and 3 or more tests performed, with only 1 positive, call it a negative
c1.m$ct_pos2[c1.m$N_tests>=3 & c1.m$n_pos<=1 & c1.m$ct_min > 35] <- 45 #if 3 or more tests, and 0 or 1 are weakly positive or neg, then call it negative
#If min >35, with at least 2 tests performed and at least 2 were positive, call it positive
c1.m$ct_pos2[c1.m$N_tests>=2 & c1.m$n_pos>= 2 & c1.m$ct_min > 35] <-
c1.m$ct_pos[c1.m$N_tests>=2 & c1.m$n_pos>= 2 & c1.m$ct_min > 35] #if 2 or more tests, and 0 or 1 are weakly positive or neg, then call it negative
#if min Ct>35, N tests is <=2 and only 1 positive, call it negative
c1.m$ct_pos2[c1.m$N_tests<=2 & c1.m$n_pos< c1.m$N_tests] <- 45 #if 2 or fewer tests, and at least 1 is positive, call positive
c1.c <- reshape2::dcast(c1.m[,c('Sample','variable','Target','ct_pos2')], Sample +variable ~ Target, fun.aggregate = min, fill=9999, value.var='ct_pos2')
c1.c$pos <- c1.c$lyta<40 & c1.c$piab<40
write.csv(c1.c, './Data/cleaned_file_s2.csv')
all.ids <- unique(c1.c$Sample)
all.ids <- all.ids[substr(all.ids,1,2)=='S2']
all.ids <- gsub(".*_","",all.ids)
all.ids <- sub('\\..*', '', all.ids)
all.ids <- sort(as.numeric(as.character(unique(all.ids))))
key4b <- cbind.data.frame('id'=all.ids ,'Household'=rep(1:(length(all.ids)/2),each=2) )
key4b$id <- paste0('S2_', key4b$id)
key4b$Household <- paste0('S2_', key4b$Household) #SEASON 1 key
key1ab <- bind_rows(key4a, key4b)
c1.m$ID <- sub("\\.[0-9]+$", "", c1.m$Sample)
c1.m$time_1a <- sub('.*\\.', '', c1.m$Sample)
c1.m$time_2a <- as.numeric(substr(c1.m$time_1a,1,1))
c1.m$time_2b <- as.numeric(substr(c1.m$time_1a,2,2))
c1.m$time_2b[is.na(c1.m$time_2b)] <- 0
c1.m$time <- round(c1.m$time_2a + c1.m$time_2b/10)
c1.m <- c1.m[order(c1.m$ID, c1.m$time),]
c1.m <- merge(c1.m, key1ab, by.x='ID',by.y='id', all.x=T)
c1.m <- c1.m[!(c1.m$ID %in% c('S1_38','S1_39', 'S1_48','S1_49', 'S1_58', 'S1_59')),]
d1 <- dcast(c1.m[,c('ID','Target','time','ct_pos2')],  ID +Target ~ time, fun.aggregate = min, na.rm=T, fill=9999, value.var = 'ct_pos2')
write.csv(d1, './Data/Result1_S2.csv')
d1.alt <- dcast(c1.m[,c('ID','Target','time','ct_pos2')],  ID +time~ Target, fun.aggregate = min, na.rm=T, fill=9999, value.var = 'ct_pos2')
d1.alt <- d1.alt[!(d1.alt$ID %in% c('S1_38','S1_39', 'S1_48','S1_49', 'S1_58', 'S1_59')),] #these IDs were not included in study
write.csv(d1.alt, './Data/Result2_S2.csv') #Anne's preferred format
c1.m <- c1.m[!(c1.m$ID %in% c('S1_38','S1_39', 'S1_48','S1_49', 'S1_58', 'S1_59')),] #these IDs were not included in study
d1.a <- acast(c1.m[,c('ID','Target','time','ct_pos2','Household')], Target ~ ID +Household ~ time, fun.aggregate=min, na.rm=T, fill=9999, value.var = 'ct_pos2')
d1.ds <- reshape2::dcast(c1.m[,c('ID','Target','time','ct_pos2','Household')],   Household +ID+ time ~ Target, fun.aggregate=min, na.rm=T, fill=9999, value.var = 'ct_pos2')
d1.ds <- d1.ds %>%
group_by(Household ,time) %>%
arrange(ID) %>%
mutate(HH_order=row_number() ) %>%
ungroup()
piab.plot <- heat.fun(target='piab')
# breakslist<-seq(15,45,by=1)
#
# cols1 <- colorRampPalette(c('red4','red','darkorange','orange','gold','lightgoldenrod1','white','white'))(length(breakslist))
#
# p1 <- ggplot(d1.ds, aes(time, HH_order, fill= piab)) +
#   geom_tile() +
#   scale_fill_viridis_c(option = "B", direction = -1) +
#
#   theme_classic()+
#   ylab('Serotype tested')+
#    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
#   facet_wrap(~Household, ncol=3)+
#   theme(
#   strip.text.x = element_blank()
# )
# p1
